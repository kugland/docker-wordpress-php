# This is the default configuration file for Snuffleupagus (https://snuffleupagus.rtfd.io),
# for php8.
# It contains "reasonable" defaults that won't break your websites,
# and a lot of commented directives that you can enable if you want to
# have a better protection.

# Harden the PRNG
sp.harden_random.enable();

# Disabled XXE
sp.xxe_protection.enable();

# Global configuration variables
# sp.global.secret_key("YOU _DO_ NEED TO CHANGE THIS WITH SOME RANDOM CHARACTERS.");

# Globally activate strict mode
# https://www.php.net/manual/en/language.types.declarations.php#language.types.declarations.strict
# sp.global_strict.enable();

# Prevent unserialize-related exploits
# sp.unserialize_hmac.enable();

# Only allow execution of read-only files. This is a low-hanging fruit that you should enable.
# sp.readonly_exec.enable();

# PHP has a lot of wrappers, most of them aren't usually useful, you should
# only enable the ones you're using.
# sp.wrappers_whitelist.list("file,php,phar");

# Prevent sloppy comparisons.
# sp.sloppy_comparison.enable();

# Use SameSite on session cookie
# https://snuffleupagus.readthedocs.io/features.html#protection-against-cross-site-request-forgery
sp.cookie.name("WP_PHPSESSID").samesite("lax");

# Harden the `chmod` function (0777 (oct = 511, 0666 = 438)
sp.disable_function.function("chmod").param("permissions").value("438").drop();
sp.disable_function.function("chmod").param("permissions").value("511").drop();

# Prevent various `mail`-related vulnerabilities
sp.disable_function.function("mail").param("additional_parameters").value_r("\\-").drop();

# Since it's now burned, me might as well mitigate it publicly
sp.disable_function.function("putenv").param("assignment").value_r("LD_").drop()

# This one was burned in Nov 2019 - https://gist.github.com/LoadLow/90b60bd5535d6c3927bb24d5f9955b80
sp.disable_function.function("putenv").param("assignment").value_r("GCONV_").drop()

# Since people are stupid enough to use `extract` on things like $_GET or $_POST, we might as well mitigate this vector
sp.disable_function.function("extract").param("array").value_r("^_").drop()
sp.disable_function.function("extract").param("flags").value("0").drop()

# This is also burned:
# ini_set('open_basedir','..');chdir('..');â€¦;chdir('..');ini_set('open_basedir','/');echo(file_get_contents('/etc/passwd'));
# Since we have no way of matching on two parameters at the same time, we're
# blocking calls to open_basedir altogether: nobody is using it via ini_set anyway.
# Moreover, there are non-public bypasses that are also using this vector ;)
sp.disable_function.function("ini_set").param("option").value_r("open_basedir").drop()

# Prevent various `include`-related vulnerabilities
sp.disable_function.function("require_once").value_r("\.(inc|phtml|php)$").allow();
sp.disable_function.function("include_once").value_r("\.(inc|phtml|php)$").allow();
sp.disable_function.function("require").value_r("\.(inc|phtml|php)$").allow();
sp.disable_function.function("include").value_r("\.(inc|phtml|php)$").allow();
sp.disable_function.function("require_once").drop()
sp.disable_function.function("include_once").drop()
sp.disable_function.function("require").drop()
sp.disable_function.function("include").drop()

# Prevent `system`-related injections
sp.disable_function.function("system").param("command").value_r("[$|;&`\\n\\(\\)\\\\]").drop();
sp.disable_function.function("shell_exec").param("command").value_r("[$|;&`\\n\\(\\)\\\\]").drop();
sp.disable_function.function("exec").param("command").value_r("[$|;&`\\n\\(\\)\\\\]").drop();
sp.disable_function.function("proc_open").param("command").value_r("[$|;&`\\n\\(\\)\\\\]").drop();

# Prevent runtime modification of interesting things
sp.disable_function.function("ini_set").param("option").value("assert.active").drop();
sp.disable_function.function("ini_set").param("option").value("zend.assertions").drop();
sp.disable_function.function("ini_set").param("option").value("memory_limit").drop();
sp.disable_function.function("ini_set").param("option").value("include_path").drop();
sp.disable_function.function("ini_set").param("option").value("open_basedir").drop();

# Detect some backdoors via environment recon
sp.disable_function.function("ini_get").param("option").value("allow_url_fopen").drop();
sp.disable_function.function("ini_get").param("option").value("open_basedir").drop();
sp.disable_function.function("ini_get").param("option").value_r("suhosin").drop();
sp.disable_function.function("function_exists").param("function").value("eval").drop();
sp.disable_function.function("function_exists").param("function").value("exec").drop();
sp.disable_function.function("function_exists").param("function").value("system").drop();
sp.disable_function.function("function_exists").param("function").value("shell_exec").drop();
sp.disable_function.function("function_exists").param("function").value("proc_open").drop();
sp.disable_function.function("function_exists").param("function").value("passthru").drop();
sp.disable_function.function("is_callable").param("value").value("eval").drop();
sp.disable_function.function("is_callable").param("value").value("exec").drop();
sp.disable_function.function("is_callable").param("value").value("system").drop();
sp.disable_function.function("is_callable").param("value").value("shell_exec").drop();
sp.disable_function.function("is_callable").param("value").value("proc_open").drop();
sp.disable_function.function("is_callable").param("value").value("passthru").drop();

# Ghetto error-based sqli detection
# sp.disable_function.function("mysql_query").ret("FALSE").drop();
# sp.disable_function.function("mysqli_query").ret("FALSE").drop();
# sp.disable_function.function("PDO::query").ret("FALSE").drop();

# Ensure that certificates are properly verified
sp.disable_function.function("curl_setopt").param("value").value("1").allow();
sp.disable_function.function("curl_setopt").param("value").value("2").allow();
# `81` is SSL_VERIFYHOST and `64` SSL_VERIFYPEER
sp.disable_function.function("curl_setopt").param("option").value("64").drop().alias("Please don't turn CURLOPT_SSL_VERIFYCLIENT off.");
sp.disable_function.function("curl_setopt").param("option").value("81").drop().alias("Please don't turn CURLOPT_SSL_VERIFYHOST off.");

# File upload
sp.disable_function.function("move_uploaded_file").param("to").value_r("\\.ph").drop();
sp.disable_function.function("move_uploaded_file").param("to").value_r("\\.ht").drop();

# Logging lockdown
sp.disable_function.function("ini_set").param("option").value_r("error_log").drop()
sp.disable_function.function("ini_set").param("option").value_r("error_reporting").drop()
sp.disable_function.function("ini_set").param("option").value_r("display_errors").drop()

# CVE-2017-1001000 - https://blog.sucuri.net/2017/02/content-injection-vulnerability-wordpress-rest-api.html
sp.disable_function.filename("/wp-includes/rest-api/endpoints/class-wp-rest-posts-controller.php").function("register_routes").var("_GET[id]").value_r("[^0-9]").drop();
sp.disable_function.filename("/wp-includes/rest-api/endpoints/class-wp-rest-posts-controller.php").function("register_routes").var("_POST[id]").value_r("[^0-9]").drop();

## INI protection - prevent unwanted runtime ini changes made by ini_set() or other functions or by .htaccess
sp.ini_protection.enable();

## simulation mode: only log violations
sp.ini_protection.simulation();

## FOR PRODUCTION SYSTEMS: disable error messages and version numbers
sp.ini.key("display_errors").set("0").ro();
sp.ini.key("display_startup_errors").set("0").ro();
sp.ini.key("expose_php").set("0").ro();
## FOR DEVELOPMENT/TESTING: allow enabling error messages and version numbers
#sp.ini.key("display_errors").rw();
#sp.ini.key("display_startup_errors").rw();
#sp.ini.key("expose_php").rw();

## error logging options should not be set during runtime -> read-only.
sp.ini.key("error_log").ro();
sp.ini.key("error_reporting").ro();
sp.ini.key("log_errors").ro();
@condition PHP_VERSION_ID < 80000;
sp.ini.key("log_errors_max_len").set("2048").ro();
@end_condition;
sp.ini.key("ignore_repeated_errors").ro();
sp.ini.key("ignore_repeated_source").ro();
sp.ini.key("syslog.filter").ro();

## enforce color codes. prevents potential XSS
sp.ini.key("highlight.comment").regexp("^#[0-9a-fA-F]{6}$");
sp.ini.key("highlight.default").regexp("^#[0-9a-fA-F]{6}$");
sp.ini.key("highlight.html").regexp("^#[0-9a-fA-F]{6}$");
sp.ini.key("highlight.keyword").regexp("^#[0-9a-fA-F]{6}$");
sp.ini.key("highlight.string").regexp("^#[0-9a-fA-F]{6}$");

## prevent remote access via fopen/include
sp.ini.key("allow_url_fopen").set("0").ro();
sp.ini.key("allow_url_include").set("0").ro();

## prevent code execution from auto-included files
sp.ini.key("auto_append_file").ro();
sp.ini.key("auto_prepend_file").ro();

## make rarely used features read-only. you can always set the value in php.ini
sp.ini.key("arg_separator.input").ro();
sp.ini.key("arg_separator.output").ro();
sp.ini.key("auto_detect_line_endings").ro();
sp.ini.key("auto_globals_jit").ro();
sp.ini.key("browscap").ro();
sp.ini.key("default_charset").ro();
sp.ini.key("register_argc_argv").ro();
sp.ini.key("report_memleaks").ro();
sp.ini.key("report_zend_debug").ro();
sp.ini.key("request_order").ro();
sp.ini.key("url_rewriter.hosts").ro();
sp.ini.key("url_rewriter.tags").ro();
sp.ini.key("variables_order").ro();
sp.ini.key("from").ro();
sp.ini.key("short_open_tag").ro();
sp.ini.key("unserialize_callback_func").ro();
sp.ini.key("zend.detect_unicode").ro();
sp.ini.key("zend.enable_gc").ro();
sp.ini.key("zend.exception_ignore_args").ro();
sp.ini.key("zend.exception_string_param_max_len").ro();
sp.ini.key("zend.multibyte").ro();
sp.ini.key("zend.script_encoding").ro();

## allow reasonable socket timeouts
sp.ini.key("default_socket_timeout").min("1").max("300").rw();

## disable dynamic loading of PHP extensions in an apache/mod_php environment as it is a security risk.
sp.ini.key("enable_dl").set("0").ro();

## links to manual pages in error pages should not be set during runtime.
sp.ini.key("docref_ext").ro();
sp.ini.key("docref_root").ro();
sp.ini.key("html_errors").set("0").ro();

## restrict limit settings to prevent Denial-of-Service
sp.ini.key("max_execution_time").min("30").max("600").rw();
sp.ini.key("max_file_uploads").min("0").max("25").rw();
sp.ini.key("max_input_nesting_level").min("16").max("64").rw();
sp.ini.key("max_input_time").set("-1").ro();
sp.ini.key("max_input_vars").min("0").max("1024").rw();
sp.ini.key("memory_limit").min("4M").max("256M").rw();
sp.ini.key("post_max_size").max("256M").rw();
sp.ini.key("upload_max_filesize").max("256M").rw();
sp.ini.key("precision").max("14").rw();
sp.ini.key("unserialize_max_depth").min("128").max("4096").rw();
sp.ini.key("serialize_precision").ro();

## open basedir is a security feature similar to chroot.
## why should it be allowed to disable this feature during runtime?
sp.ini.key("open_basedir").ro();

## phar options
@condition extension_loaded("phar");
sp.ini.key("phar.cache_list").ro();
sp.ini.key("phar.readonly").ro();
sp.ini.key("phar.require_hash").ro();
@end_condition;

## allow setting the user agent
sp.ini.key("user_agent").rw();

## allow setting the xmlrpc fault code
sp.ini.key("xmlrpc_error_number").rw();

## these ini entries can only be set by php.ini anyway,
## but better set them to read-only anyway, just to be sure.
sp.ini.key("disable_classes").ro();
sp.ini.key("disable_functions").ro();
sp.ini.key("doc_root").ro();
sp.ini.key("extension_dir").ro();
sp.ini.key("file_uploads").ro();
sp.ini.key("hard_timeout").ro();
sp.ini.key("realpath_cache_size").ro();
sp.ini.key("realpath_cache_ttl").ro();
sp.ini.key("sendmail_path").ro();
@condition extension_loaded("sqlite3");
sp.ini.key("sqlite3.defensive").ro();
sp.ini.key("sqlite3.extension_dir").ro();
@end_condition;
sp.ini.key("sys_temp_dir").ro();
sp.ini.key("syslog.facility").ro();
sp.ini.key("syslog.ident").ro();
sp.ini.key("upload_tmp_dir").ro();
sp.ini.key("user_dir").ro();
sp.ini.key("user_ini.cache_ttl").ro();
sp.ini.key("user_ini.filename").ro();
sp.ini.key("zend.assertions").ro();
sp.ini.key("zend.signal_check").set("0").ro();
